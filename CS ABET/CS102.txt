Course Syllabus
CS-102 - Introduction to Computing and Problem Solving

Credits: 4									Contact hours: 4
Instructor’s or course coordinator’s name: Gil Eckert
Required Textbook and Other Materials:
Computer Science Illuminated - 6th Edition - Jones & Bartlett - Dale and Lewis (printed or eBook, new or used). Printed Text ISBN: 9781284055917. eBook ISBN: 9781284090482

Course Description:
Introduces a broad overview of computing topics, designed to provide students with awareness of the computing field's many aspects. Topics include fundamentals of computer architecture, operating systems, applications, networks and problem-solving. Computing topics are demonstrated and presented and assignments are completed using computing applications including word processors, spreadsheets, databases, presentation software, and programming platforms. Introduces social and ethical issues related to computing and explores the local and global impact of computing on individuals, organizations and society. It also gives students their initial exposure to group project work.
Prerequisite(s): None
	
Required or selected elective: Required

Specific outcomes of instruction:

(2) Design, implement, and evaluate a computing-based solution to meet a given set of computing requirements in the context of the program's discipline (ABET)

(5) Function effectively as a member or leader of a team engaged in activities appropriate to the program's discipline (ABET)

 (6) Apply computer science theory and software development fundamentals to produce computing-based solutions (Computer Science Department) 


Relationship of course to student outcomes listed:

In this course students are given an opportunity to:

* Identify key technical developments and ideas in computing
* Correctly evaluate simple logical (Boolean) expressions
* List and describe the basic architectural units of a computer
* Distinguish networks, the Internet, and the World Wide Web
* Identify and work with various document and file formats
* Identify, use, and distinguish several basic data types
* Design an algorithm to solve a problem
* Design a system to meet desired needs
* Function as a member or leader of a group project 
* Understand professional and ethical responsibility

Topics Covered:

•	Computing Layers
•	History of Computing Hardware and Software
•	Generations of Computing
•	Flowcharting concepts
•	Familiarization with robots, setup, programming
•	Environments (API,IDE)
•	Programming Language Basics (Python)
•	Syntax
•	Formal Problem Solving 
•	Pseudocode 
•	Algorithmic Development 
•	Testing 
•	Sorts 
•	Searches 
•	Repetition 
•	Controlled Loops 
•	Abstraction 
•	Indexing
•	Arrays/Lists 
•	Records 
•	Boolean Logic
•	Stacks 
•	Queues
•	Trees 
•	Subprograms/Functions 
•	Parameters 
•	Compilers vs Interpreters 
•	Language Functionality 
•	Procedural vs OO languages 
•	Spreadsheets

